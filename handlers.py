# bot/handlers/user/start.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from keyboards.reply import get_main_menu
from state import DomainState


router = Router()
@router.message(F.text == 'New chat')
async def new_chat(message:Message, state:FSMContext):

    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–±–ª–∞—Å—Ç—å –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
    await state.set_state(DomainState.domain)



@router.message(Command("start"))
async def cmd_start(message: Message, state:FSMContext):
  

    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ –±–æ—Ç —Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–æ–º\n" \
        "–í—ã–±–µ—Ä–µ—Ç–µ –æ–±–ª–∞—Å—Ç—å –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å",
        # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await state.set_state(DomainState.domain)


@router.message(DomainState.query)
async def process_name(message: Message, state: FSMContext):
    from chat import final_chain
    DEFAULT_SESSION_ID = '1'
    data = await state.get_data()
    
    answer = final_chain.invoke({"domain": data["domain"], "question": message.text},
            config={"configurable": {"session_id": DEFAULT_SESSION_ID}},)
    await message.answer(answer)


@router.message(DomainState.domain)
async def start_domain(message: Message, state: FSMContext):
    await state.update_data(domain=message.text)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:", reply_markup=get_main_menu())
    await state.set_state(DomainState.query)








# @router.message()
# async def query(message:Message):
   

#     domain = message.text

#     answer = final_chain.invoke({"domain": domain, "question": user_question},
#             config={"configurable": {"session_id": DEFAULT_SESSION_ID}},)


#     return await message.answer(query)

# @router.message(F.text == "üìÇ –ö–∞—Ç–∞–ª–æ–≥")
# async def show_catalog(message: Message, session: AsyncSession):
#     from models.category import Category
#     categories = (await session.scalars(select(Category))).all()
#     if not categories:
#         await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
#         return
#     await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb(categories))

# # bot/handlers/user/start.py ‚Äî –ó–ê–ú–ï–ù–ò –§–£–ù–ö–¶–ò–Æ view_cart –ù–ê –≠–¢–£:

# @router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
# async def view_cart(message: Message, session: AsyncSession):
#     # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_tg_id = message.from_user.id

#     # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
#     from models.user import User
#     user = (await session.scalars(select(User).where(User.telegram_id == user_tg_id))).first()
#     if not user:
#         await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ /start.")
#         return

#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
#     from models.cart import CartItem
#     cart_items = (await session.scalars(
#         select(CartItem).where(CartItem.user_id == user.id).options(selectinload(CartItem.product))
#     )).all()

#     if not cart_items:
#         await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         return

#     total = sum(item.quantity * item.product.price for item in cart_items)
#     text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>:\n\n"
#     for item in cart_items:
#         text += f"‚ñ™Ô∏è {item.product.name}\n  {item.quantity} √ó {item.product.price} = <b>{item.quantity * item.product.price} —Ä—É–±.</b>\n"

#     text += f"\n<b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>"

#     from keyboards.inline import cart_kb
#     await message.answer(text, reply_markup=cart_kb(cart_items), parse_mode="HTML")

# @router.message(F.text == "üõ† –ê–¥–º–∏–Ω–∫–∞")
# async def show_admin_panel(message: Message, session: AsyncSession):
#     from config import settings
#     if message.from_user.id not in settings.ADMIN_IDS:
#         await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
#         return

#     from keyboards.inline import admin_kb
#     await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb())